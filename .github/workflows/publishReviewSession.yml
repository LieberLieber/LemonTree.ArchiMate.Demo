# Copyright (c) Robert Bosch GmbH and LieberLieber Software GmbH
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

name: LTA publish review session to PR

on:
  pull_request_target:
    types:
      - opened
      - edited
      - reopened
      - synchronize
      - review_requested

env:
  ModelName: ArchimateModel
  ModelExtension: qeax
  ReviewSessionURL: https://nexus.lieberlieber.com/repository/LemonTree.ArchiMate.Demo/lemontree-session
  SVGURL: https://nexus.lieberlieber.com/repository/LemonTree.ArchiMate.Demo/svg/Diff/

jobs:
  PublishReviewSession:
    defaults:
      run:
        shell: pwsh
    runs-on: [windows-latest]
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0
          
      - name: Get relevant commit IDs
        id: CommitIds
        run: |
          git fetch
          $baseId = git merge-base origin/$env:GITHUB_BASE_REF origin/$env:GITHUB_HEAD_REF
          Write-Output "baseCommitId=$baseId" >> $env:GITHUB_OUTPUT
          $sourceId = git show-ref --hash origin/$env:GITHUB_HEAD_REF
          Write-Output "sourceCommitId=$sourceId" >> $env:GITHUB_OUTPUT
          $targetId = git show-ref --hash origin/$env:GITHUB_BASE_REF
          Write-Output "targetCommitId=$targetId" >> $env:GITHUB_OUTPUT
          Write-Output "target branch: $env:GITHUB_BASE_REF"
          Write-Output "source branch: $env:GITHUB_HEAD_REF"
          Write-Output "target commit: $targetId"
          Write-Output "source commit: $sourceId"
          $gitCommitId = $sourceId
          Write-Output "CommitID=$gitCommitId" >>$env:GITHUB_OUTPUT
          Write-Output "base commit: $baseId"

      - name: Create sessionfile name
        id: session_file
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const repoName = context.payload.pull_request.base.repo.name
            const prNumber = context.payload.pull_request.number
            const baseSHA = '${{steps.CommitIds.outputs.targetCommitId}}'
            const headSHA = '${{steps.CommitIds.outputs.sourceCommitId}}'
            const filename = [repoName, 'PR', prNumber, baseSHA, headSHA].join('-') + '.ltsfs'
            console.log(`Filename will be: ${filename}`)
            return filename

      - name: Download base-commit file
        id: baseDownload
        run: |
          git fetch origin ${{steps.CommitIds.outputs.baseCommitId}}
          $pointer = git cat-file blob ${{steps.CommitIds.outputs.baseCommitId}}:${{env.ModelName}}.${{env.ModelExtension}}
          $sha = ($pointer[1] -split(":"))[1]
          if($sha -ne $null){
            $shaPart1 = $sha.Substring(0,2)
            $shaPart2 = $sha.Substring(2,2)
            Write-Output "Model SHA: $sha"
            git cat-file --filters ${{steps.CommitIds.outputs.baseCommitId}}:${{env.ModelName}}.${{env.ModelExtension}} | Out-Null
            copy ".git\lfs\objects\$shaPart1\$shaPart2\$sha" "${{env.ModelName}}_base.${{env.ModelExtension}}"
            Write-Output "result=downloaded" >> $env:GITHUB_OUTPUT
          }
          else{
            Write-Output "result=notFound" >> $env:GITHUB_OUTPUT
          }
          
      - name: Post new model comment to PR
        if: steps.baseDownload.outputs.result == 'notFound'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Model not found on base commit / fork-off point`
            })
            
      - name: Download source branch head file
        if: steps.baseDownload.outputs.result == 'downloaded'
        id: headDownload
        run: |
          git fetch origin $env:GITHUB_HEAD_REF
          $pointer = git cat-file blob ${{steps.CommitIds.outputs.sourceCommitId}}":${{env.ModelName}}.${{env.ModelExtension}}"
          $sha = ($pointer[1] -split(":"))[1]
          $shaPart1 = $sha.Substring(0,2)
          $shaPart2 = $sha.Substring(2,2)
          Write-Output "Model SHA: $sha"
          git cat-file --filters ${{steps.CommitIds.outputs.sourceCommitId}}":${{env.ModelName}}.${{env.ModelExtension}}" | Out-Null
          copy ".git\lfs\objects\$shaPart1\$shaPart2\$sha" "${{env.ModelName}}_head.${{env.ModelExtension}}"
      
      # download Lemontree.Automation on a runner and setup the license
      - name: GetLTA
        uses: LieberLieber/setup-LemonTree.Automation@v5
        id: GetLTA
        with:
          License: ${{secrets.LTALICENSE}} 
        #ExeLocation &"${{steps.GetLTA.outputs.LemonTreeAutomationExecutable}}"

      - name: Check for merge conflicts
        if: steps.baseDownload.outputs.result == 'downloaded'
        id: mergeCheck
        run: |
          Write-Output "****"
          Write-Output "${{steps.GetLTA.outputs.LemonTreeAutomationExecutable}}"
          Write-Output "****"
          &"${{steps.GetLTA.outputs.LemonTreeAutomationExecutable}}" merge --base ${{env.ModelName}}_base.${{env.ModelExtension}} --theirs ${{env.ModelName}}.${{env.ModelExtension}} --mine ${{env.ModelName}}_head.${{env.ModelExtension}} --dryrun --sfs ${{ steps.session_file.outputs.result }} --abortOnConflict true
          Write-Output "result=$LASTEXITCODE" >> $env:GITHUB_OUTPUT
          Write-Output "Return code: $LASTEXITCODE"
          if($LASTEXITCODE -eq 0){
            Write-Output "No merge conflicts, setting message"
            Write-Output "message=:heavy_check_mark: **No merge conflicts in model**\n\n" >> $env:GITHUB_OUTPUT
          }
          elseif($LASTEXITCODE -eq 2){
            Write-Output "Internal Error when diffing. Please report such errors to support@lieberlieber.com"
            exit 2
          }
          elseif($LASTEXITCODE -eq 3){
            Write-Output "Merge conflicts, setting message"
            Write-Output "message=:x: **Please resolve merge conflicts in model first**\n\n" >> $env:GITHUB_OUTPUT
            exit 0
          }
          elseif($LASTEXITCODE -eq 6){
            Write-Output "Licensing issue of LemonTree.Automation"
          }
          else{
            Write-Output "Unknown error"
          }    
       
      - name: Create review session file
        id: checkSession
        run: |
          $Message = "${{ steps.mergeCheck.outputs.message }}"
          $sfsfilename ="${{ steps.session_file.outputs.result }}"
          $mergecheckresult = ${{ steps.mergeCheck.outputs.result}}
          if ($mergecheckresult  -eq 0)
          {
            $output = &'${{steps.GetLTA.outputs.LemonTreeAutomationExecutable}}' diff --theirs ${{env.ModelName}}_base.${{env.ModelExtension}} --mine ${{env.ModelName}}_head.${{env.ModelExtension}} --sfs ${{ steps.session_file.outputs.result }} --DiffReportFilename DiffReport.xml --ReportIncludeDiagrams
            Write-Output $output
            ForEach ($line in $($output -split "`r`n"))
            {
                if ($line.EndsWith('Found 0 different elements.'))
                {
                  Write-Output "No differences we don't need to publish the session file."
                  $Message = ":heavy_check_mark: **Model is identical!**"
                  $sfsfilename =""; 
                }                
            }
          }
          
          $xmlFilePath = "DiffReport.xml"
          [xml]$xmlContent = Get-Content -Path $xmlFilePath
          
          # Define the XML namespaces
          $ns = New-Object Xml.XmlNamespaceManager $xmlContent.NameTable
          $ns.AddNamespace("ns", "http://www.lieberlieber.com")

          $modifiedElementOutput=""

          $removedElements = $xmlContent.SelectNodes("//ns:package[@name='SystemArchitecture']/ns:classifier/ns:element[@diffState='Removed']", $ns) 
          foreach ($removedElement in $removedElements){
            if($removedElement.name){
              $modifiedElementOutput += ":heavy_minus_sign:"+$removedElement.name+"\n"
            }
          }

          $modifedElements = $xmlContent.SelectNodes("//ns:package[@name='SystemArchitecture']/ns:classifier/ns:element[@diffState='Modified']", $ns) 
          foreach ($modifiedElement in $modifedElements){
            if($modifiedElement.name){
              $modifiedElementOutput += ":zap:"+$modifiedElement.name+"\n"
            }
          }

          $newElements = $xmlContent.SelectNodes("//ns:package[@name='SystemArchitecture']/ns:classifier/ns:element[@diffState='New']", $ns) 
          foreach ($newElement in $newElements){
            if($newElement.name){
              $modifiedElementOutput += ":heavy_plus_sign:"+$newElement.name+"\n"
            }
          }
          
          $Message = $Message +"\n\n Modified Elements in SystemArchitecture:\n\n$modifiedElementOutput"

          
          # Select all diagramPicture elements using the defined namespace
          $diagramPictures = $xmlContent.SelectNodes('//ns:diagramPictures/ns:diagramPicture', $ns)
          
          # Output the count of found elements
          Write-Host "Found $($diagramPictures.Count) Diagrams."
          $Message = $Message +"\n\nFound $($diagramPictures.Count) Diagrams."
          foreach ($diagramPicture in $diagramPictures) {
              $diagramGuid = $diagramPicture.guid
              if($diagramGuid){
                  $cdata_b = $diagramPicture.diagramPictureB.InnerText
          
              # Check if the CDATA section is empty
              if (![string]::IsNullOrEmpty($cdata_b)) {
                          $qualifiedName = $diagramPicture.diagramPictureB.qualifiedName
                          write-host $qualifiedName
                          $fileGuid = $diagramGuid.Replace('{','').Replace('}','')
                          $filename = "$fileGuid.svg"
                          write-output "$qualifiedName ==> $filename"
                          $cdata_b | %{[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($_))}|Set-Content -Encoding UTF8 -Path $filename

                          $Message = $Message +"\n\n$qualifiedName\n\n [![SVG](${{env.SVGURL}}/${{steps.CommitIds.outputs.CommitID}}$filename)](https://github.com/LieberLieber/LemonTree.PCS.Demo/actions/workflows/publishReviewSession.yml)"
                          Write-Output "$uploadFile"
                          while (Test-Path Alias:curl) {Remove-Item Alias:curl} #remove the alias binding from curl to Invoke-WebRequest
                            curl "-u${{secrets.NEXUSAUTHENTICATION}}" -T ".\$filename" "${{env.SVGURL}}/${{steps.CommitIds.outputs.CommitID}}$filename"
                      }
                  }
              }

          
          Write-Output "$Message"
          Write-Output "SfsFileName=$sfsfilename" >> $env:GITHUB_OUTPUT
          Write-Output "message=$Message" >> $env:GITHUB_OUTPUT
          exit 0

      - name: Upload Session
        id: uploadSession
        if: steps.baseDownload.outputs.result == 'downloaded'
        run: |
          $sessionFileName = "${{ steps.checkSession.outputs.SfsFileName }}"
          $sfsFileNameLinks =""
          if ([string]::IsNullOrEmpty($sessionFileName))
          {
            Write-Output "Nothing to upload"
          }
          else
          {
            $targetUrl = "${{env.ReviewSessionURL}}/${{ steps.session_file.outputs.result }}"
            Write-Output "Uploading $sessionFileName to Nexus: $targetUrl"
            while (Test-Path Alias:curl) {Remove-Item Alias:curl} #remove the alias binding from curl to Invoke-WebRequest
            curl "-u${{secrets.NEXUSAUTHENTICATION}}" -T $sessionFileName $targetUrl
 
            $sfsFileNameLinks += "\nReview Changes with LemonTree:"
            $sfsFileNameLinks +="[Desktop]($targetUrl)/"
            $sfsFileNameLinks +="[Web](https://lemontree2.4biz-94523.k8s.nextlayer.at/web?sessionAutoStart=true&sessionFromUrl=$targetUrl)"
            $sfsFileNameLinks +="\nInstall [LemonTree 3.3+](https://www.lieberlieber.com/lemontree/en/) to open the Review Session file."
          }
          
          Write-Output "SfsFileNameLinks=$sfsFileNameLinks" >> $env:GITHUB_OUTPUT

      - name: Archive DiffReport.xml
        uses: actions/upload-artifact@v4
        with:
                name: DiffReport
                path: .\*.xml
                retention-days: 2

      - name: Create PR comment
        if: steps.baseDownload.outputs.result == 'downloaded'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${{ steps.checkSession.outputs.message }}${{ steps.uploadSession.outputs.SfsFileNameLinks }}`
            })
